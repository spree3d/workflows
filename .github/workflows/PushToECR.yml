name: Push Docker Image into ECR

on:
  workflow_call:
    inputs:
      AWS_ROLE_DURATION:
        required: true
        type: string
      ECR_REPOSITORY_NAME:
        required: true
        type: string
      BUILD_NUMBER:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      AWS_ROLE_ARN:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  push-to-ecr:
    runs-on: [self-hosted, general]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-duration-seconds: ${{ inputs.AWS_ROLE_DURATION }}
      
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull image
        env:
          ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ inputs.BUILD_NUMBER }}
        run: |
          docker pull docker.io/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and Push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ inputs.BUILD_NUMBER }}
        run: |
          docker tag docker.io/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker rmi $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
