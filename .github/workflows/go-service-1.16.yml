name: Build, Test and Push Container

on:
  workflow_call:
    inputs:
      CODECOV_TOKEN:
        required: false
        type: string
    outputs:
      BUILD_NUMBER:
        description: "the build number/tag of the successful run"
        value: ${{ jobs.version.outputs.BUILD_NUMBER }}

env:
  GOPROXY: http://goproxy/
  GOPRIVATE: github.com/spree3d/*
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  SLACK_HOOK: ${{ secrets.SLACK_HOOK }}
  CODECOV_TOKEN: ${{ inputs.CODECOV_TOKEN }}

jobs:

  version:
    name: Determine Build Number
    runs-on: [spree3d-shared-general]
    if: success()
    outputs:
      BUILD_NUMBER: ${{ steps.gitversion.outputs.semVer }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          useConfigFile: true

  tests:
    name: Test & Push Container
    runs-on: spree3d-shared-general
    needs: version
    if: success()
    env:
      BUILD_NUMBER: ${{ needs.version.outputs.BUILD_NUMBER }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Log Start
      run: pwd && ls && date +%s > start.txt && cat start.txt

    - name: Display build vars
      if: success()
      run: make build-vars

    - name: Test Script
      run: env

    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.0

    - name: Setup Git
      if: success()
      run: git config --global url."https://$GITHUB_TOKEN:@github.com/".insteadOf "https://github.com"

    - name: Build
      if: success()
      run: make build

    - name: Run Tests
      if: success()
      run: make test

    - name: Lint
      if: success()
      run: make lint

    - name: Coverage
      if: success()
      run: make cover

    - name: Login to Docker Hub
      if: success()
      run: echo "$DOCKERHUB_TOKEN" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin

    - name: Docker Build
      if: success()
      run: make docker-build

    - name: Run Integration Tests
      if: success()
      run: make compose-test

    - name: Report Card
      if: success()
      run: rm -rf vendor && make reportcard

    - name: Docker Push
      if: github.ref == 'refs/heads/main' && success()
      run: make docker-push

    - name: Create Tag
      if: github.ref == 'refs/heads/main' && success()
      uses: actions/github-script@v3
      with:
        github-token: ${{ github.token }}
        script: |
          github.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: "refs/tags/v${{ env.BUILD_NUMBER }}",
            sha: context.sha
          })

    - name: Notify Slack
      if: success()
      run: |
        IFS=$'\n'
        VARS=$(make build-vars 2> /dev/null)
        for v in $VARS; do
            eval "${v/=/"=\""}\"";
        done
        COMMIT_USERNAME=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" https://api.github.com/repos/${VENDOR}/${SERVICE}/commits/${BUILD_HASH} | jq -r .author.login)
        COMMIT_USERAVATAR=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" https://api.github.com/repos/${VENDOR}/${SERVICE}/commits/${BUILD_HASH} | jq -r .author.avatar_url)
        COMMIT_USERLINK=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" https://api.github.com/repos/${VENDOR}/${SERVICE}/commits/${BUILD_HASH} | jq -r .author.html_url)
        START=$(cat start.txt)
        STOP=$(date +%s)
        SECONDS=$(expr ${STOP} - ${START})
        MINUTES=$(expr ${SECONDS} / 60)
        curl -X POST ${SLACK_HOOK} \
        -d @- << EOF
            {
                "channel": "backend-engineering-builds",
                "username": "Github Actions - ${SERVICE_FRIENDLY}",
                "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                "attachments": [{
                    "mrkdwn_in": ["text","value"],
                    "color": "#36a64f",
                    "pretext": "New Image pushed to Docker Hub",
                    "author_name": "${COMMIT_USERNAME}",
                    "author_link": "${COMMIT_USERLINK}",
                    "author_icon": "${COMMIT_USERAVATAR}",
                    "title": "${SERVICE}",
                    "title_link": "${BUILD_REPO}/actions/runs/${GITHUB_RUN_ID}",
                    "text": "${BUILD_MESSAGE}\n\nTook ${MINUTES} minutes to build and test\n\nReport Card:\n\n${REPORTCARD}\n\n<${BUILD_REPO}/commit/${BUILD_HASH}|Github Commit> | <${BUILD_REPO})/actions/runs/${GITHUB_RUN_ID}|Github Action Run>",
                    "fields": [{"title": " ","value": " ", "short": true },{"title": " ","value": " ","short": true},
                        {
                            "title": "Build Number",
                            "value": "${BUILD_NUMBER}",
                            "short": true
                        },
                        {
                            "title": "Image",
                            "value": "<https://hub.docker.com/repository/docker/${VENDOR}/${SERVICE}|${DOCKER_IMG}:${BUILD_NUMBER}>",
                            "short": true
                        }],
                    "thumb_url": "https://o.dlf.pt/dfpng/smallpng/279-2798236_gopher-docker-transparent-cartoons-docker-golang-hd-png.png",
                    "footer": "${VENDOR} ci",
                    "footer_icon": "https://platform.slack-edge.com/img/default_application_icon.png"
                }]
            }
        EOF

    - name: Notify Slack fail
      if: failure()
      run: make slack-buildfail

    - name: Cleanup Containers
      if: success() || failure()
      run: make docker-clean

    - name: Stop and Remove All Containers
      if: success() || failure()
      run: |
        docker container stop `docker container ls -q` 2>/dev/null || true
        docker container rm -f `docker container ls -aq` 2>/dev/null || true
        docker volume rm `docker volume ls -qf dangling=true` 2>/dev/null || true
        docker network rm `docker network ls -qf dangling=true` 2>/dev/null || true
        exit 0